# stat_distribution.py
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from db.database import get_character, save_state_db as save_state, load_state_db as load_state
from utils.helpers import send_race_card
from utils.keyboards import add_back_button
import random
from data.constants import RACE_BONUSES, CLASS_BONUSES
from data.names import RANDOM_NAMES

STAT_LABELS = {
    "–°–∏–ª–∞": "str",
    "–õ–æ–≤–∫–æ—Å—Ç—å": "dex",
    "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": "con",
    "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": "int",
    "–ú—É–¥—Ä–æ—Å—Ç—å": "wis",
    "–•–∞—Ä–∏–∑–º–∞": "cha"
}

STAT_NAMES_REVERSE = {
    "str": "–°–∏–ª–∞",
    "dex": "–õ–æ–≤–∫–æ—Å—Ç—å",
    "con": "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
    "int": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
    "wis": "–ú—É–¥—Ä–æ—Å—Ç—å",
    "cha": "–•–∞—Ä–∏–∑–º–∞"
}

# üé≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
async def show_random_name(chat_id, bot, user_states, db_pool):
    name = random.choice(RANDOM_NAMES)
    state = await load_state(chat_id, db_pool) or {}
    state["hero_name"] = name
    state["state"] = "confirm_random_name"
    await save_state(chat_id, state, db_pool)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–∏–Ω—è—Ç—å"))
    markup.add(KeyboardButton("–î—Ä—É–≥–æ–µ –∏–º—è"))
    markup.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    await bot.send_message(chat_id, f"–¢–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è: {name} –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ?", reply_markup=markup)

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
async def handle_random_name_choice(message, user_states, bot, db_pool):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    state = await load_state(chat_id, db_pool) or {}

    if text == "–ø—Ä–∏–Ω—è—Ç—å":
        state["state"] = "awaiting_gender"
        await save_state(chat_id, state, db_pool)

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))
        markup = add_back_button(markup)
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=markup)

    elif text == "–¥—Ä—É–≥–æ–µ –∏–º—è":
        await show_random_name(chat_id, bot, user_states, db_pool)

    elif text == "–Ω–∞–∑–∞–¥":
        await prompt_hero_name(chat_id, bot, db_pool)

    else:
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# üî§ –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è
async def prompt_hero_name(chat_id, bot, db_pool):
    state = await load_state(chat_id, db_pool) or {}
    state["state"] = "awaiting_hero_name"
    await save_state(chat_id, state, db_pool)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è"))
    markup = add_back_button(markup)

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ \"–°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è\":", reply_markup=markup)

# üß± –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
async def handle_stat_distribution_method(message, state, bot, db_pool):
    chat_id = message.chat.id
    text = message.text.strip().lower()

    if text == "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ":
        await start_standard_distribution(chat_id, state, bot, db_pool)
    elif text == "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ":
        await start_custom_distribution(chat_id, state, bot, db_pool)
    else:
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ' –∏–ª–∏ '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ' —Å –∫–Ω–æ–ø–∫–∏.")

# üß± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
async def start_standard_distribution(chat_id, state, bot, db_pool):
    state.update({
        "state": "assign_stat_value",
        "available_values": [15, 14, 13, 12, 10, 8],
        "assigned_stats": {},
        "available_stats": list(STAT_LABELS.keys())
    })
    await save_state(chat_id, state, db_pool)

    value = state["available_values"][0]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for stat in state["available_stats"]:
        markup.add(KeyboardButton(stat))
    markup = add_back_button(markup)

    await bot.send_message(chat_id, f"–ö–∞–∫—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—é {value}?", reply_markup=markup)

# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
async def handle_stat_assignment(message, state, bot, db_pool):
    chat_id = message.chat.id
    text = message.text.strip()

    if text not in state["available_stats"]:
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    value = state["available_values"][0]
    key = STAT_LABELS[text]
    state["assigned_stats"][key] = value
    state["available_values"].pop(0)
    state["available_stats"].remove(text)

    if state["available_values"]:
        next_value = state["available_values"][0]
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for stat in state["available_stats"]:
            markup.add(KeyboardButton(stat))
        markup = add_back_button(markup)
        await save_state(chat_id, state, db_pool)
        await bot.send_message(chat_id, f"–ö–∞–∫—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—é {next_value}?", reply_markup=markup)
    else:
        await finalize_character(chat_id, state, bot, db_pool, state["assigned_stats"])

# üßÆ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def finalize_character(chat_id, state, bot, db_pool, stats):
    race = state["race"]
    char_class = state["class"]
    hero_name = state["hero_name"]
    gender = state["gender"]

    race_bonus = RACE_BONUSES.get(race, {})
    class_bonus = CLASS_BONUSES.get(char_class, {})

    for stat in stats:
        stats[stat] += race_bonus.get(stat, 0) + class_bonus.get(stat, 0)

    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            UPDATE users SET gender=$1, race=$2, class=$3, hero_name=$4,
            strength=$5, dexterity=$6, constitution=$7,
            intelligence=$8, wisdom=$9, charisma=$10
            WHERE chat_id=$11
            """,
            gender, race, char_class, hero_name,
            stats["str"], stats["dex"], stats["con"],
            stats["int"], stats["wis"], stats["cha"], chat_id
        )

    await send_race_card(bot, chat_id, race, char_class, stats, hero_name, gender=gender)
    await bot.send_message(chat_id, "üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å—é–∂–µ—Ç –¥–ª—è –∏–≥—Ä—ã!")

    await save_state(chat_id, {"state": "main_menu"}, db_pool)

# üöß TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)
async def start_custom_distribution(chat_id, state, bot, db_pool):
    state.update({
        "state": "custom_stat_str",
        "custom_stats": {},
        "remaining_points": 27,
        "order": ["str", "dex", "con", "int", "wis", "cha"],
        "current_index": 0
    })
    await save_state(chat_id, state, db_pool)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(8, 16):
        markup.add(KeyboardButton(str(i)))
    markup = add_back_button(markup)

    await bot.send_message(chat_id, "–ù–∞—á–Ω–µ–º! –°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –≤–ª–æ–∂–∏—Ç—å –≤ –°–ò–õ–£?", reply_markup=markup)

# üßÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (27 –æ—á–∫–æ–≤)
async def handle_custom_distribution(message, state, bot, db_pool):
    chat_id = message.chat.id
    text = message.text.strip()

    try:
        val = int(text)
    except ValueError:
        await bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 8 –¥–æ 15.")
        return

    if val < 8 or val > 15:
        await bot.send_message(chat_id, "–î–æ–ø—É—Å—Ç–∏–º—ã –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 8 –¥–æ 15.")
        return

    def calc_cost(score):
        return {8: 0, 9: 1, 10: 2, 11: 3, 12: 4, 13: 5, 14: 7, 15: 9}.get(score, 100)

    cost = calc_cost(val)
    if cost > state["remaining_points"]:
        await bot.send_message(chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {state['remaining_points']}.")
        return

    order = state["order"]
    index = state["current_index"]
    stat_key = order[index]

    state["custom_stats"][stat_key] = val
    state["remaining_points"] -= cost
    state["current_index"] += 1

    if state["current_index"] < len(order):
        next_stat = order[state["current_index"]]
        state["state"] = f"custom_stat_{next_stat}"
        await save_state(chat_id, state, db_pool)

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(8, 16):
            markup.add(KeyboardButton(str(i)))
        markup = add_back_button(markup)

        await bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {STAT_NAMES_REVERSE[next_stat]}. –û—á–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {state['remaining_points']}",
            reply_markup=markup
        )
    else:
        await finalize_character(chat_id, state, bot, db_pool, state["custom_stats"])